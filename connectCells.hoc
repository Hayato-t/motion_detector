load_file("nrngui.hoc")
//load_file("read.hoc")

objref nclist, nclist_out1, nclist_out2,nclist_i2o, r
double count[NCELL]
double rec_connect[NCELL][NSYN]




proc initCount() { local i
    for i=0, cells.count-1 {
	count[i] = 0
    }
}

proc checkgid() {local i, exist
    for i=0, NCELL-1 {
	exist = pc.gid_exists(i)
	if(exist){
	    printf("cell %d exists!!\n",i)
	}
	//printf("%dth result is %d\n",i,exist)
    }
}

//objref confirm


proc connectInputCells() { local i, j, k, l, targid, num_ecell,num_vta, num_cell, num_cell_full, branch_num, counter localobj src, target, syn, nc, nil
    num_ecell = $1
    num_vta = $2
    num_cell = $3
    num_cell_full = $4
    branch_num = $5
    nclist = new List()
    r = new Random(25525)
    counter = 0

    num_vta = 0
/*    
    confirm = new Matrix()
    confirm.resize(NCELL,NCELL)
    for i=0,NCELL-1{
	for j=0,NCELL-1{
	    confirm.x[i][j]=0
	}
    }
    
    */
    mem = -1
     for i=0, num_ecell-1{
        if(pc.gid_exists(i)){
            for j=0, branch_num-1 {
                for k=0, num_cell-1 {
                    if(con.x[i][k%num_ecell]){
			//pc.gid2cell(i).dend[j] {
                        syn = pc.gid2cell(i).makeSyn(i,k,num_ecell,num_vta,0,0,0,j,con_order_input.x[i*branch_num+j][counter]/16.0)
                        nc = pc.gid_connect((con.x[i][k%num_ecell]-1)+k*2+num_cell_full,syn)
                        counter = counter + 1
                        //printf("my host id = %d, parent(pre) cell id = %d(e->e)\n",pc.id,k)
                        nclist.append(nc)
                        nc.threshold = 0
                        nc.delay = 0.1
                        nc.weight = 0.0002
			//}
			//counter = counter + 1
                    }
                }
                //printf("counter = %d\n",counter)
                counter = 0
            }
        }
        
        if(pc.gid_exists(i+num_ecell)){
            for j=0, branch_num-1 {
                for k=0, num_ecell-1 {
                    if(con.x[i][k]){
			//pc.gid2cell(i+num_ecell).dend[j] {
                        syn = pc.gid2cell(i+num_ecell).makeSyn(i+num_ecell,k,num_ecell,num_vta,0,0,0,j,con_order_input.x[i*branch_num+j][counter]/16.0)
                        nc = pc.gid_connect((con.x[i][k]-1)+k*2+num_cell_full,syn)
                        counter = counter + 1
                        nclist.append(nc)
                        nc.threshold = 0
                        nc.delay = 0.1
                        nc.weight = 0.0002
			//}
			//counter = counter + 1
                    }
                }
                counter = 0
            }
            
            //if excitatory cell above me (inhibiroty cell) is fired, i wanna also fire
	    //for l=0, 3{
		syn = pc.gid2cell(i+num_ecell).makeSynUpDown(i+num_ecell,i+num_ecell,num_ecell,num_vta,0,0,0)
		syn.e = 0
		nc = pc.gid_connect(i,syn)
		nclist.append(nc)
		nc.threshold = 0
		nc.delay = 0.1
		nc.weight = 0.2
	    //}
        }
        
    }

}

/////////////////////////////////////////////////////////TODO////////////////////////////////////////////////////////////////
//shold be modified to the manner from the single compartment to the double compartmentmodel////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

proc connectOutput1Cells() { local i, j, k,l, pargid, num_ecell_out1, num_syn, num_vta, num_cell_out1, num_cell_input, num_cell_full, cellid, branch_num, counter localobj src, target, syn, nc, nil
    num_ecell_out1 = $1
    num_vta = $2
    num_cell_out1 = $3
    num_cell_input = $4
    num_cell_full = $5
    branch_num = $6
    nclist_out1 = new List()
    r = new Random(25525)
    counter = 0
/*    
    confirm = new Matrix()
    confirm.resize(NCELL,NCELL)
    for i=0,NCELL-1{
	for j=0,NCELL-1{
	    confirm.x[i][j]=0
	}
    }
    
    */
    mem = -1
    
    
    for i=0, num_cell_out1-1 {
        if(pc.gid_exists(i+num_cell_input)){
	    for l=0, branch_num-1 {
		for j=0, num_cell_out1-1{
                    for(k=0;k<con_out1.x[i][j];k+=1){
                    
			//pc.gid2cell(i+num_cell_input).dend[l] {
                        syn = pc.gid2cell(i+num_cell_input).makeSyn(i,j,num_ecell_out1,64,1,num_ecell_out1,num_ecell_out1+int((num_cell_out1-num_ecell_out1)/5),l,con_order_out1.x[i*branch_num+l][counter]/61.0)
                        nc = pc.gid_connect((j+num_cell_input)*2+1+num_cell_full,syn)
                        if(counter<60){
			    counter = counter + 1
			}
                        nclist_out1.append(nc)
                        nc.threshold = 0
                        nc.delay = 0.1 
                        if(j<num_ecell_out1){
			    nc.weight = OUT1_E*r.uniform(0.5,1)
                        }else{
			    nc.weight = OUT1_I
                        }
			//}
			//counter = counter + 1
                    }
                    //counter = 0
                }
		counter = 0 
            }
        }
    }
    
}

proc connectOutput2Cells() { local i, j, k,l, pargid, num_ecell_out2, num_syn, num_vta, num_cell_out2, num_cell_i_o1, num_cell_full, cellid, branch_num, counter localobj src, target, syn, nc, nil
    num_ecell_out2 = $1
    num_vta = $2
    num_cell_out2 = $3
    num_cell_i_o1 = $4
    num_cell_full = $5
    branch_num = $6
    nclist_out2 = new List()
    r = new Random(25525)
    counter = 0
/*    
    confirm = new Matrix()
    confirm.resize(NCELL,NCELL)
    for i=0,NCELL-1{
	for j=0,NCELL-1{
	    confirm.x[i][j]=0
	}
    }
    
    */
    mem = -1
    
    for i=0, num_cell_out2-1{
        if(pc.gid_exists(i+num_cell_i_o1)){
            for j=0, num_cell_out2-1{
                for(k=0;k<con_out2.x[i][j];k=k+1){
                    //for l=0, branch_num-1 {
		    l = 0
                        syn = pc.gid2cell(i+num_cell_i_o1).makeSyn(i,j,num_ecell_out2,int(num_ecell_out2/4),1,num_ecell_out2,num_ecell_out2+int((num_cell_out2-num_ecell_out2)/4),l,con_order_out2.x[i*branch_num+l][counter]/19.0)
                        nc = pc.gid_connect((j+num_cell_i_o1)*2+1+num_cell_full,syn)
                        counter = counter + 1
                        nclist_out2.append(nc)
                        nc.threshold = 0
                        nc.delay = 0.1
                        if(j<num_ecell_out2){
                            nc.weight = OUT1_E*r.uniform(0,1)//0.0002//0.01
                        }else{
                            nc.weight = OUT1_I//0.03//0.1
                        }
                        
                    //}
                    counter = 0
                }
                
            }
        }
    }
}

proc connectI2O(){local i, j, k, l, m, num_ecell, num_cell_out1, num_ecell_out1, num_cell_out2, num_ecell_out2, num_vta, num_cell_input, num_cell_full, num_cell_i_o1, branch_num, counter localobj nc, syn
    num_ecell = $1
    num_cell_out1 = $2
    num_ecell_out1 = $3
    num_cell_out2 = $4
    num_ecell_out2 =$5
    num_vta = $6
    num_cell_input = $7
    branch_num = $8
    
    
    counter = 0
    
    num_cell_i_o1 = num_cell_input + num_cell_out1
    num_cell_full = num_cell_i_o1  + num_cell_out2
    
    nclist_i2o = new List()
    
     for i=0, num_cell_out1-1 {
        if(pc.gid_exists(num_cell_input+i)){
            //for j=0, num_ecell-1 {
	    for l=0, branch_num-1 {
		for j=0, num_cell_input-1 {
                    for(k=0;k<con_i2o1.x[i][j%num_ecell];k=k+1){
			
			//pc.gid2cell(i+num_cell_input).dend[l]{
			//for m=0, 1{
			syn = pc.gid2cell(i+num_cell_input).makeSyn(i+num_cell_input,j,num_ecell,num_vta,0,0,0,l,con_order_i2o1.x[i*branch_num+l][counter]/82.0)
			nc = pc.gid_connect(j*2+1+num_cell_full,syn)
			if(counter<81){
			    counter = counter + 1
			}
			nclist_i2o.append(nc)
			nc.threshold = -35//0
			nc.delay = 0.1
			if(j<num_ecell){
			    nc.weight = IO_E*r.uniform(0.3,1)
			}else{
			    if(i<num_ecell_out1){
				nc.weight = IO_I2E
			    }else{
				nc.weight = IO_I2I
			    }
			}
			//}
			//}
			//counter = counter + 1 
                        
                    }
                    //counter = 0
                }
		counter = 0
            }
        }
    }
    
    /*
    for i=0, num_cell_out2-1 {
        if(pc.gid_exists(i+num_cell_i_o1)){
            //for j=0, num_ecell-1{
            for j=0, num_cell_input-1 {
                for(k=0;k<con_i2o2.x[i][j%num_ecell];k=k+1){
                    for l=0, branch_num-1 {
                        syn = pc.gid2cell(i+num_cell_i_o1).makeSyn(i+num_cell_i_o1,j,num_ecell,num_vta,0,0,0,l,con_order_i2o2.x[i*branch_num+l][counter]/72.0)
                        nc = pc.gid_connect(j*2+1+num_cell_full,syn)
                        counter = counter = 1
                        nclist_i2o.append(nc)
                        nc.threshold = 0
                        nc.delay = 0.1
                        nc.weight = 0.0002
                        
                    }
                }
            }
        }
    }*/
}

proc subst(){local i
    for i=0, nclist.count-1 {
	nclist.o(i).weight = weight_input.x(i)
    }
    
    for i=0, nclist_out1.count-1{
	nclist_out1.o(i).weight = weight_out1.x(i)
    }
    
    for i=0, nclist_out2.count-1{
	nclist_out2.o(i).weight = weight_out2.x(i)
    }
    
    for i=0, nclist_i2o.count-1 {
	nclist_i2o.o(i).weight = weight_i2o.x(i)
    }
}

proc off_plast(){local i, j
    for i=0, cells.count-1{
	for j=0, cells.o(i).synlist_e.count-1{
	    cells.o(i).synlist_e.o(j).d=0
	    cells.o(i).synlist_e.o(j).p=0
	}
    }
}

proc set_LR(){local i, j
    for i=0, cells.count-1 {
	for j=0, cells.o(i).synlist_e.count-1{
	    cells.o(i).synlist_e.o(j).LR = LEARNING_RATE
	    cells.o(i).synlist_e.o(j).ltd = LTD
	}
    }
}