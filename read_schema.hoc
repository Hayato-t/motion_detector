load_file("nrngui.hoc")

/*************************************************************************************************/
//NCELL * NCELL no matrix ni kakunou site, 
objref con_RtoL1 //schema connection code: 0
objref con_RtoL2 //1
objref con_L1toMi1 //2
objref con_L1toTm3 //3
objref con_Mi1toT4 
objref con_Tm3toT4
objref con_L2toL4
objref con_L2toTm1
objref con_L2toTm2
objref con_L4toTm2
objref con_Tm1toT5
objref con_Tm2toT5 //11

objref f
strdef filename

proc read_mat() {local i localobj enabled_connection, numlist_of_cells
    // connection_schema is a matrix which descripts existance of connection
    // numlist_of_cells[schema_celltype_code] = the number of that celltype
    // schema celltype_code list
    // 0:R 1:L1 2:L2 3:Tm1 4:Tm2 5:Tm3 6:Mi1 7:T4 8:T5
    connection_schema = $o1
    numlist_of_cells = $o2

    //read the connection file of input layer
    if(enabled_connection[0] == 1){
      con_RtoL1 = new Matrix()
      f = new File()
      f.ropen("schema/con_RtoL1.dat")
      con_RtoL1.scanf(f,numlist_of_cells[0],numlist_of_cells[1])
      f.close()
    }
    
    
    if(enabled_connection[1] == 1){
      con_RtoL2 = new Matrix()
      f = new File()
      f.ropen("schema/con_RtoL2.dat")
      con_RtoL2.scanf(f,numlist_of_cells[0],numlist_of_cells[2])
      f.close()
    }
    
    if(enabled_connection[2] == 1){
      con_L1toMi1 = new Matrix()
      f = new File()
      f.ropen("schema/con_L1toMi1.dat")
      con_L1toMi1.scanf(f,numlist_of_cells[1],numlist_of_cells[6])
      f.close()
    }

    if(enabled_connection[3] == 1){
      con_L1toTm3 = new Matrix()
      f = new File()
      f.ropen("schema/con_L1toTm3.dat")
      con_L1toTm3.scanf(f,numlist_of_cells[1],numlist_of_cells[5])
      f.close()
    }

    if(enabled_connection[4] == 1){
      con_Mi1toT4 = new Matrix()
      f = new File()
      f.ropen("schema/con_Mi1toT4.dat")
      con_Mi1toT.scanf(f,numlist_of_cells[1],numlist_of_cells[6])
      f.close()
    }

    for i=0, data_num-1{
        f = new File()
        sprint(filename,"./data/stim%d.dat",i+1)
        f.ropen(filename)
        stimuli[i] = new Vector()
        stimuli[i].scanf(f,num_ecell)
        f.close()
    }

    f = new File()
    f.ropen("./order.dat")
    stim_order = new Vector()
    stim_order.scanf(f,data_num*LEARNING_TIMES)
    f.close()

}

proc read_weight(){local i, nc_input, nc_out1, nc_out2, nc_i2o
    nc_input = $1
    nc_out1 = $2
    nc_out2 = $3
    nc_i2o = $4
    
    
    
    for(i=0;i<pc.nhost;i=i+1){
	if(i==pc.id){
	    weight_input = new Vector()
	    weight_out1 = new Vector()
	    weight_out2 = new Vector()
	    weight_i2o = new Vector()
	    
	    f = new File()
	    sprint(filename,"./weights/nclist%d.dat",i)
	    //printf("filename is  %s\n",filename)
	    f.ropen(filename)
	    weight_input.scanf(f,nc_input)
	    f.close()
	    
	    f = new File()
	    sprint(filename,"./weights/nclist_out1_%d.dat",i)
	    f.ropen(filename)
	    weight_out1.scanf(f,nc_out1)
	    f.close()
	    
	    f = new File()
	    sprint(filename,"./weights/nclist_out2_%d.dat",i)
	    f.ropen(filename)
	    weight_out2.scanf(f,nc_out2)
	    f.close()
	    
	    f = new File()
	    sprint(filename,"./weights/nclist_i2o_%d.dat",i)
	    f.ropen(filename)
	    weight_i2o.scanf(f,nc_i2o)
	    f.close()
	}
    }
}

//read_mat()
